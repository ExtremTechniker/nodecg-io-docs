{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"nodecg-io nodecg-io is a NodeCG -bundle that implements Social Media API's in the NodeCG framework About nodecg-io nodecg-io is the successor of ChatOverflow . The aim of this bundle is to simplify the code and expand the number of integrated services. However, the main goal is still to carry out the API integration for you and thus to save you development time. How to use nodecg-io If you want to use nodecg-io, you should note that it is only a framework for your bundle, so you need at least a basic knowledge of the programming language Javascript or any other language that compiles to Javascript like Typescript. If that's no problem you can had over to the Installation Guide and then look at the sample bundles for your selected service. Implemented Services and Interfaces AHK Discord IntelliJ IDEs IRC (Internet Relay Chat) MIDI RCON Serial Port (Arduino) Spotify StreamElements TipeeeStream Twitch Chat Twitter WebSocket Client & Server Youtube How to contribute If you want to contribute to this bundle you can implement one of this services or fix an issue . Before contributing had over to the How to contribute - Guide.","title":"Home"},{"location":"#nodecg-io","text":"nodecg-io is a NodeCG -bundle that implements Social Media API's in the NodeCG framework","title":"nodecg-io"},{"location":"#about-nodecg-io","text":"nodecg-io is the successor of ChatOverflow . The aim of this bundle is to simplify the code and expand the number of integrated services. However, the main goal is still to carry out the API integration for you and thus to save you development time.","title":"About nodecg-io"},{"location":"#how-to-use-nodecg-io","text":"If you want to use nodecg-io, you should note that it is only a framework for your bundle, so you need at least a basic knowledge of the programming language Javascript or any other language that compiles to Javascript like Typescript. If that's no problem you can had over to the Installation Guide and then look at the sample bundles for your selected service.","title":"How to use nodecg-io"},{"location":"#implemented-services-and-interfaces","text":"AHK Discord IntelliJ IDEs IRC (Internet Relay Chat) MIDI RCON Serial Port (Arduino) Spotify StreamElements TipeeeStream Twitch Chat Twitter WebSocket Client & Server Youtube","title":"Implemented Services and Interfaces"},{"location":"#how-to-contribute","text":"If you want to contribute to this bundle you can implement one of this services or fix an issue . Before contributing had over to the How to contribute - Guide.","title":"How to contribute"},{"location":"contribute/","text":"How to contribute There are many ways to contribute to nodecg-io: logging bugs, submitting pull requests, reporting issues, and creating suggestions. Prerequisites In order to download necessary tools, clone the repository, and install dependencies via npm you need network access. You'll need the following tools: Git Node.JS v12.0.0 or newer Npm NodeCG Getting the sources First, fork this repository so that you can make a pull request. Then, clone your fork locally: git clone https://github.com/<<<your-github-username>>>/nodecg-io.git Note: You should clone nodecg-io to somewhere outside of your nodecg bundles/ directory as this repo contains many bundles in subdirectories and nodecg doesn't support nesting of the bundles in other directories. You can clone it to any other path that you wish. Install and build all of the dependencies using npm : cd path/to/nodecg-io npm install Build VsCode In Vscode you can start the build task with Ctrl + Shift + B ( CMD + Shift + B on macOS). The incremental builder will do an initial full build. The watch builder will watch for file changes and compile those changes incrementally, giving you a fast, iterative coding experience. It will even stay running in the background if you close VS Code. You can resume it by starting the build task with Ctrl + Shift + B ( CMD + Shift + B ) again. ou can kill the build task by pressing Ctrl + D in the task terminal ( CMD + D on macOS. Errors and warnings will be shown in the status bar at the bottom left of the editor. You can view the error list using View | Errors and Warnings or pressing Ctrl + P and then ! ( CMD + P and ! on macOS) Terminal You can also use you terminal to build nodecg-io: cd path/to/nodecg-io npm run build The watch builder can be activated here too: cd path/to/nodecg-io npm run watch Add nodecg-io directory to the nodecg config: Modify the nodecg configuration in path/to/nodecg/cfg/nodecg.json , here is an example config: { \"bundles\": { \"paths\": [\"path/to/nodecg-io\", \"path/to/nodecg-io/samples\"] } } Note 1: This path should point to the root of this repository, not to a bundle inside this repo. Note 2: The second path to the samples is only required if you want to use a sample plugin. Note 3: If nodecg doesn't load nodecg-io for some reason you might want to use an absolute path here. Run To test the changes you simply need to start/restart nodecg. Automated Testing Nothing yet Unit Testing Nothing yet Work Branches Even if you have push rights on the Chatoverflow/nodecg-io repository, you should create a personal fork and create feature branches there when you need them. This keeps the main repository clean and your personal workflow cruft out of sight. Pull Requests Occasionally you will want to merge changes in the upstream repository (the official code repo) with your fork. cd path/to/nodecg-io git checkout master git pull https://github.com/codeoverflow-org/nodecg-io master Manage any merge conflicts, commit them, and then push them to your fork. Now you can make a pull request from your folk. Where to Contribute After cloning and building the repo, check out the issues list . Issues labeled help wanted are good issues to submit a PR for. Issues labeled good first issue are great candidates to pick up if you are in the code for the first time. If you are contributing significant changes, please discuss with the assignee of the issue first before starting to work on the issue. Packaging Maybe in the future Suggestions We're also interested in your feedback. You can submit a suggestion or feature request through the issue tracker. To make this process more effective, we're asking that these include more information to help define them more clearly. Discussion Etiquette In order to keep the conversation clear and transparent, please limit discussion to English and keep things on topic with the issue. Be considerate to others and try to be courteous and professional at all times.","title":"Basics"},{"location":"contribute/#how-to-contribute","text":"There are many ways to contribute to nodecg-io: logging bugs, submitting pull requests, reporting issues, and creating suggestions.","title":"How to contribute"},{"location":"contribute/#prerequisites","text":"In order to download necessary tools, clone the repository, and install dependencies via npm you need network access. You'll need the following tools: Git Node.JS v12.0.0 or newer Npm NodeCG","title":"Prerequisites"},{"location":"contribute/#getting-the-sources","text":"First, fork this repository so that you can make a pull request. Then, clone your fork locally: git clone https://github.com/<<<your-github-username>>>/nodecg-io.git Note: You should clone nodecg-io to somewhere outside of your nodecg bundles/ directory as this repo contains many bundles in subdirectories and nodecg doesn't support nesting of the bundles in other directories. You can clone it to any other path that you wish. Install and build all of the dependencies using npm : cd path/to/nodecg-io npm install","title":"Getting the sources"},{"location":"contribute/#build","text":"","title":"Build"},{"location":"contribute/#vscode","text":"In Vscode you can start the build task with Ctrl + Shift + B ( CMD + Shift + B on macOS). The incremental builder will do an initial full build. The watch builder will watch for file changes and compile those changes incrementally, giving you a fast, iterative coding experience. It will even stay running in the background if you close VS Code. You can resume it by starting the build task with Ctrl + Shift + B ( CMD + Shift + B ) again. ou can kill the build task by pressing Ctrl + D in the task terminal ( CMD + D on macOS. Errors and warnings will be shown in the status bar at the bottom left of the editor. You can view the error list using View | Errors and Warnings or pressing Ctrl + P and then ! ( CMD + P and ! on macOS)","title":"VsCode"},{"location":"contribute/#terminal","text":"You can also use you terminal to build nodecg-io: cd path/to/nodecg-io npm run build The watch builder can be activated here too: cd path/to/nodecg-io npm run watch","title":"Terminal"},{"location":"contribute/#add-nodecg-io-directory-to-the-nodecg-config","text":"Modify the nodecg configuration in path/to/nodecg/cfg/nodecg.json , here is an example config: { \"bundles\": { \"paths\": [\"path/to/nodecg-io\", \"path/to/nodecg-io/samples\"] } } Note 1: This path should point to the root of this repository, not to a bundle inside this repo. Note 2: The second path to the samples is only required if you want to use a sample plugin. Note 3: If nodecg doesn't load nodecg-io for some reason you might want to use an absolute path here.","title":"Add nodecg-io directory to the nodecg config:"},{"location":"contribute/#run","text":"To test the changes you simply need to start/restart nodecg.","title":"Run"},{"location":"contribute/#automated-testing","text":"Nothing yet","title":"Automated Testing"},{"location":"contribute/#unit-testing","text":"Nothing yet","title":"Unit Testing"},{"location":"contribute/#work-branches","text":"Even if you have push rights on the Chatoverflow/nodecg-io repository, you should create a personal fork and create feature branches there when you need them. This keeps the main repository clean and your personal workflow cruft out of sight.","title":"Work Branches"},{"location":"contribute/#pull-requests","text":"Occasionally you will want to merge changes in the upstream repository (the official code repo) with your fork. cd path/to/nodecg-io git checkout master git pull https://github.com/codeoverflow-org/nodecg-io master Manage any merge conflicts, commit them, and then push them to your fork. Now you can make a pull request from your folk.","title":"Pull Requests"},{"location":"contribute/#where-to-contribute","text":"After cloning and building the repo, check out the issues list . Issues labeled help wanted are good issues to submit a PR for. Issues labeled good first issue are great candidates to pick up if you are in the code for the first time. If you are contributing significant changes, please discuss with the assignee of the issue first before starting to work on the issue.","title":"Where to Contribute"},{"location":"contribute/#packaging","text":"Maybe in the future","title":"Packaging"},{"location":"contribute/#suggestions","text":"We're also interested in your feedback. You can submit a suggestion or feature request through the issue tracker. To make this process more effective, we're asking that these include more information to help define them more clearly.","title":"Suggestions"},{"location":"contribute/#discussion-etiquette","text":"In order to keep the conversation clear and transparent, please limit discussion to English and keep things on topic with the issue. Be considerate to others and try to be courteous and professional at all times.","title":"Discussion Etiquette"},{"location":"contributors/","text":"a.contributorlink:hover { text-decoration-style: solid; text-decoration-line: underline; text-decoration-color: white; } fetch('https://api.github.com/repos/codeoverflow-org/nodecg-io/contributors').then(response => { response.json().then(data => { let idx = 1 data.forEach(entry => { const div = document.createElement('div') div.style = `grid-column: 1; grid-row: ${idx}; display: inline-block; padding-bottom: 10px` if ('avatar_url' in entry) { div.innerHTML = ` <img src=\"${entry.avatar_url}\" width=\"64\" height=\"64\" style=\"float: left; margin-top: 0\"> <div style=\"float:left; margin-top: 0\"> <span style=\"font-size: 16pt; font-weight: bold; margin-left: 1em; color: white;\"> <a style=\"color: white;\" class=\"contributorlink\" href=\"${entry.html_url}\">${entry.login}</a> </span><br> <span style=\"font-size: 12pt; margin-left: 1em; color: white;\"> <a style=\"color: white;\" class=\"contributorlink\" href=\"https://github.com/codeoverflow-org/nodecg-io/commits?author=${entry.login}\">${entry.contributions} contributions</a> </span> </div> ` } else { div.innerHTML = ` <span style=\"font-size: 16pt; font-weight: bold; margin-left: 1em; color: white;\">${entry.login}</span><br> <span style=\"font-size: 12pt; margin-left: 1em; color: white;\">${entry.contributions} contributions</span> ` } document.getElementById('contributorview').appendChild(div) idx += 1 }) }) }) Top 30 nodecg-io contributors","title":"Contributors"},{"location":"contributors/#top-30-nodecg-io-contributors","text":"","title":"Top 30 nodecg-io contributors"},{"location":"create_bundle/","text":"Create your first bundle To actually use nodecg-io you need to create a bundle. Here's a step-by-step guide to create one. Dependencies Think of what services your bundle needs. Take a look at the service list if to see what services are available. If you need a service that is not yet available consider creating it . Create a package Your package is a standard NodeCG bundle. See their website for more info. The bundle should be dependent on nodecg-io-core and all services it needs. Then you define module.exports as a function that takes a NodeCG instance. In that function you initialise your bundle. Adding availability handlers Here's an example for twitch: const twitch = (nodecg.extensions[\"nodecg-io-twitch\"] as unknown) as | ServiceProvider<TwitchServiceClient> | undefined; twitch?.requireService( \"twitch-chat\", (client) => { // Do sth when twitch is available }, () => { // Do sth when twitch is not / no longer available } ); If you need multiple services you can save them in global variables. Test it Start NodeCG and provide your bundle with all required services. Share it! If you share your work others might get happy with it. And we made nodecg-io for you and the nodecg people made nodecg for you. Many people spent much time for you to create cool content that easy and if you shared your work others could create good content more easily as well.","title":"Create your first bundle"},{"location":"create_bundle/#create-your-first-bundle","text":"To actually use nodecg-io you need to create a bundle. Here's a step-by-step guide to create one.","title":"Create your first bundle"},{"location":"create_bundle/#dependencies","text":"Think of what services your bundle needs. Take a look at the service list if to see what services are available. If you need a service that is not yet available consider creating it .","title":"Dependencies"},{"location":"create_bundle/#create-a-package","text":"Your package is a standard NodeCG bundle. See their website for more info. The bundle should be dependent on nodecg-io-core and all services it needs. Then you define module.exports as a function that takes a NodeCG instance. In that function you initialise your bundle.","title":"Create a package"},{"location":"create_bundle/#adding-availability-handlers","text":"Here's an example for twitch: const twitch = (nodecg.extensions[\"nodecg-io-twitch\"] as unknown) as | ServiceProvider<TwitchServiceClient> | undefined; twitch?.requireService( \"twitch-chat\", (client) => { // Do sth when twitch is available }, () => { // Do sth when twitch is not / no longer available } ); If you need multiple services you can save them in global variables.","title":"Adding availability handlers"},{"location":"create_bundle/#test-it","text":"Start NodeCG and provide your bundle with all required services.","title":"Test it"},{"location":"create_bundle/#share-it","text":"If you share your work others might get happy with it. And we made nodecg-io for you and the nodecg people made nodecg for you. Many people spent much time for you to create cool content that easy and if you shared your work others could create good content more easily as well.","title":"Share it!"},{"location":"dependencies/","text":"Dependency Graph nodecg_io_core nodecg-io-core ajv ajv crypto_js crypto-js tslib tslib typescript typescript nodecg_io_discord nodecg-io-discord discord_js discord.js nodecg_io_intellij nodecg-io-intellij node_fetch node-fetch nodecg_io_rcon nodecg-io-rcon rcon_client rcon-client nodecg_io_spotify nodecg-io-spotify open open spotify_web_api_node spotify-web-api-node nodecg_io_twitch nodecg-io-twitch twitch twitch twitch_chat_client twitch-chat-client nodecg_io_ws_client nodecg-io-ws-client types_ws @types/ws ws ws nodecg_io_ws_server nodecg-io-ws-server","title":"Dependency Graph"},{"location":"dependencies/#dependency-graph","text":"nodecg_io_core nodecg-io-core ajv ajv crypto_js crypto-js tslib tslib typescript typescript nodecg_io_discord nodecg-io-discord discord_js discord.js nodecg_io_intellij nodecg-io-intellij node_fetch node-fetch nodecg_io_rcon nodecg-io-rcon rcon_client rcon-client nodecg_io_spotify nodecg-io-spotify open open spotify_web_api_node spotify-web-api-node nodecg_io_twitch nodecg-io-twitch twitch twitch twitch_chat_client twitch-chat-client nodecg_io_ws_client nodecg-io-ws-client types_ws @types/ws ws ws nodecg_io_ws_server nodecg-io-ws-server","title":"Dependency Graph"},{"location":"install/","text":"Installation Prerequisites In order to download necessary tools, clone the repository, and install dependencies via npm you need network access. You'll need the following tools: Git Node.JS v12.0.0 or newer Npm NodeCG Clone this repository: git clone https://github.com/codeoverflow-org/nodecg-io.git Note: You should clone nodecg-io to somewhere outside of your nodecg bundles/ directory as this repo contains many bundles in subdirectories and nodecg doesn't support nesting of the bundles in other directories. You can clone it to any other path that you wish. Install all of the dependencies using npm : cd path/to/nodecg-io npm install Build nodecg-io: cd path/to/nodecg-io npm run build Add nodecg-io directory to the nodecg config: Modify the nodecg configuration in path/to/nodecg/cfg/nodecg.json , here is an example config: { \"bundles\": { \"paths\": [\"path/to/nodecg-io\", \"path/to/nodecg-io/samples\"] } } Note 1: This path should point to the root of this repository, not to a bundle inside this repo. Note 2: The second path to the samples is only required if you want to use a sample plugin. Note 3: If nodecg doesn't load nodecg-io for some reason you might want to use an absolute path here. Start nodecg Now you can use nodecg-io in your own bundle. You can find example code in ./samples/ .","title":"Install"},{"location":"install/#installation","text":"","title":"Installation"},{"location":"install/#prerequisites","text":"In order to download necessary tools, clone the repository, and install dependencies via npm you need network access. You'll need the following tools: Git Node.JS v12.0.0 or newer Npm NodeCG","title":"Prerequisites"},{"location":"install/#clone-this-repository","text":"git clone https://github.com/codeoverflow-org/nodecg-io.git Note: You should clone nodecg-io to somewhere outside of your nodecg bundles/ directory as this repo contains many bundles in subdirectories and nodecg doesn't support nesting of the bundles in other directories. You can clone it to any other path that you wish.","title":"Clone this repository:"},{"location":"install/#install-all-of-the-dependencies-using-npm","text":"cd path/to/nodecg-io npm install","title":"Install all of the dependencies using npm:"},{"location":"install/#build-nodecg-io","text":"cd path/to/nodecg-io npm run build","title":"Build nodecg-io:"},{"location":"install/#add-nodecg-io-directory-to-the-nodecg-config","text":"Modify the nodecg configuration in path/to/nodecg/cfg/nodecg.json , here is an example config: { \"bundles\": { \"paths\": [\"path/to/nodecg-io\", \"path/to/nodecg-io/samples\"] } } Note 1: This path should point to the root of this repository, not to a bundle inside this repo. Note 2: The second path to the samples is only required if you want to use a sample plugin. Note 3: If nodecg doesn't load nodecg-io for some reason you might want to use an absolute path here.","title":"Add nodecg-io directory to the nodecg config:"},{"location":"install/#start-nodecg","text":"Now you can use nodecg-io in your own bundle. You can find example code in ./samples/ .","title":"Start nodecg"},{"location":"services/","text":"Available nodecg-io services nodecg-io-core The core of nodecg-io. Connects everything up. Depends on ajv @ ^6.12.2 Depends on crypto-js @ ^4.0.0 Depends on tslib @ ^2.0.0 Depends on typescript @ ^3.8.3 nodecg-io-discord Allows to connect to discord via a discord-bot. See the sample implementation Depends on nodecg-io-core @ 0.1.0 Depends on discord.js @ 12.2.0 nodecg-io-intellij Allows to control JetBrains IDEs via nodecg-io See the sample implementation Depends on nodecg-io-core @ 0.1.0 Depends on node-fetch @ ^2.5.7 nodecg-io-rcon Allows you to send commands to a minecraft server via RCON. There's no sample implementation for this service yet. Depends on nodecg-io-core @ 0.1.0 Depends on rcon-client @ ^4.2.0 nodecg-io-spotify Allows to connect to your personal Spotify account. This enables you to e.g. control music playback or get current song information. There's no sample implementation for this service yet. Depends on nodecg-io-core @ 0.1.0 Depends on open @ ^7.0.3 Depends on spotify-web-api-node @ ^4.0.0 nodecg-io-twitch Allows to connect to twitch with your account, send and receive messages and much more. It can be used to create Twitch-Bots. See the sample implementation Depends on nodecg-io-core @ 0.1.0 Depends on twitch @ ^4.0.10 Depends on twitch-chat-client @ ^4.0.10 nodecg-io-ws-client Allows to connect to a external WebSocket server. There's no sample implementation for this service yet. Depends on nodecg-io-core @ 0.1.0 Depends on @types/ws @ ^7.2.5 Depends on ws @ ^7.3.0 nodecg-io-ws-server Allows to create a custom WebSocket server. There's no sample implementation for this service yet. Depends on nodecg-io-core @ 0.1.0 Depends on @types/ws @ ^7.2.5 Depends on ws @ ^7.3.0","title":"Available services"},{"location":"services/#available-nodecg-io-services","text":"","title":"Available nodecg-io services"},{"location":"services/#nodecg-io-core","text":"The core of nodecg-io. Connects everything up. Depends on ajv @ ^6.12.2 Depends on crypto-js @ ^4.0.0 Depends on tslib @ ^2.0.0 Depends on typescript @ ^3.8.3","title":"nodecg-io-core"},{"location":"services/#nodecg-io-discord","text":"Allows to connect to discord via a discord-bot. See the sample implementation Depends on nodecg-io-core @ 0.1.0 Depends on discord.js @ 12.2.0","title":"nodecg-io-discord"},{"location":"services/#nodecg-io-intellij","text":"Allows to control JetBrains IDEs via nodecg-io See the sample implementation Depends on nodecg-io-core @ 0.1.0 Depends on node-fetch @ ^2.5.7","title":"nodecg-io-intellij"},{"location":"services/#nodecg-io-rcon","text":"Allows you to send commands to a minecraft server via RCON. There's no sample implementation for this service yet. Depends on nodecg-io-core @ 0.1.0 Depends on rcon-client @ ^4.2.0","title":"nodecg-io-rcon"},{"location":"services/#nodecg-io-spotify","text":"Allows to connect to your personal Spotify account. This enables you to e.g. control music playback or get current song information. There's no sample implementation for this service yet. Depends on nodecg-io-core @ 0.1.0 Depends on open @ ^7.0.3 Depends on spotify-web-api-node @ ^4.0.0","title":"nodecg-io-spotify"},{"location":"services/#nodecg-io-twitch","text":"Allows to connect to twitch with your account, send and receive messages and much more. It can be used to create Twitch-Bots. See the sample implementation Depends on nodecg-io-core @ 0.1.0 Depends on twitch @ ^4.0.10 Depends on twitch-chat-client @ ^4.0.10","title":"nodecg-io-twitch"},{"location":"services/#nodecg-io-ws-client","text":"Allows to connect to a external WebSocket server. There's no sample implementation for this service yet. Depends on nodecg-io-core @ 0.1.0 Depends on @types/ws @ ^7.2.5 Depends on ws @ ^7.3.0","title":"nodecg-io-ws-client"},{"location":"services/#nodecg-io-ws-server","text":"Allows to create a custom WebSocket server. There's no sample implementation for this service yet. Depends on nodecg-io-core @ 0.1.0 Depends on @types/ws @ ^7.2.5 Depends on ws @ ^7.3.0","title":"nodecg-io-ws-server"},{"location":"contribute/create_sample/","text":"Create a sample bundle Create a folder in samples and add a package.json and a tsconfig.json : { \"name\": \"<the samples name>\", \"version\": \"0.1.0\", \"nodecg\": { \"compatibleRange\": \"^1.1.1\", \"bundleDependencies\": { \"nodecg-io-intellij\": \"0.1.0\" } }, \"scripts\": { \"build\": \"tsc\", \"watch\": \"tsc -w\" }, \"license\": \"MIT\", \"dependencies\": { \"nodecg-io-<the services name>\": \"0.1.0\", \"nodecg-io-core\": \"0.1.0\", \"@types/node\": \"^13.13.5\", \"nodecg\": \"^1.6.1\", \"typescript\": \"^3.8.3\" } } { \"extends\": \"../../tsconfig.common.json\" } Now you can create file called extension/index.ts . Here's a template. Make sure you replace all the comments with your own code. import { NodeCG } from \"nodecg/types/server\"; import { ServiceProvider } from \"nodecg-io-core/extension/types\"; import { <the services exported client> } from \"nodecg-io-<the services name>/extension\"; module.exports = function (nodecg: NodeCG) { nodecg.log.info(\"Sample bundle for <the services name> started\"); // This explicit cast determines the client type in the requireService call const service = (nodecg.extensions[\"nodecg-io-twitch\"] as unknown) as | ServiceProvider<TwitchServiceClient> | undefined; service?.requireService( \"<sample-service>\", (client) => { nodecg.log.info(\"Client has been updated.\"); // TODO do something with the client to demonstrate the functionality. }, () => nodecg.log.info(\"Client has been unset.\"), ); }; Next steps You could add documentation for the sample bundle.","title":"Create a sample bundle"},{"location":"contribute/create_sample/#create-a-sample-bundle","text":"Create a folder in samples and add a package.json and a tsconfig.json : { \"name\": \"<the samples name>\", \"version\": \"0.1.0\", \"nodecg\": { \"compatibleRange\": \"^1.1.1\", \"bundleDependencies\": { \"nodecg-io-intellij\": \"0.1.0\" } }, \"scripts\": { \"build\": \"tsc\", \"watch\": \"tsc -w\" }, \"license\": \"MIT\", \"dependencies\": { \"nodecg-io-<the services name>\": \"0.1.0\", \"nodecg-io-core\": \"0.1.0\", \"@types/node\": \"^13.13.5\", \"nodecg\": \"^1.6.1\", \"typescript\": \"^3.8.3\" } } { \"extends\": \"../../tsconfig.common.json\" } Now you can create file called extension/index.ts . Here's a template. Make sure you replace all the comments with your own code. import { NodeCG } from \"nodecg/types/server\"; import { ServiceProvider } from \"nodecg-io-core/extension/types\"; import { <the services exported client> } from \"nodecg-io-<the services name>/extension\"; module.exports = function (nodecg: NodeCG) { nodecg.log.info(\"Sample bundle for <the services name> started\"); // This explicit cast determines the client type in the requireService call const service = (nodecg.extensions[\"nodecg-io-twitch\"] as unknown) as | ServiceProvider<TwitchServiceClient> | undefined; service?.requireService( \"<sample-service>\", (client) => { nodecg.log.info(\"Client has been updated.\"); // TODO do something with the client to demonstrate the functionality. }, () => nodecg.log.info(\"Client has been unset.\"), ); };","title":"Create a sample bundle"},{"location":"contribute/create_sample/#next-steps","text":"You could add documentation for the sample bundle.","title":"Next steps"},{"location":"contribute/create_service/","text":"Create a service integration This guide helps you to create a service integration such as twitch-chat or discord Find a javascript library Go to npmjs.com and look whether there's already a package that wraps around the API of your service. If there's no such package you need to create one yourself. This process is not described here. Create a package From here you will have to replace: YourServiceName to your service's name in PascalCase . yourServiceName to your service's name in carmelCase . * your-service-name to your service's name with only lowercase and hyphens ( - ) for example: ws-server. Now you need to create a package. You should call it nodecg-io-your-service-name . First create a directory with that name put file called package.json into it. Put the following into it: { \"name\": \"nodecg-io-your-service-name\", \"version\": \"0.1.0\", \"description\": \"<Short description what is possible with your service.>\", \"homepage\": \"\", \"author\": { \"name\": \"<Your name>\", \"url\": \"<Your github profile url>\" }, \"scripts\": { \"build\": \"tsc\", \"watch\": \"tsc -w\" }, \"keywords\": [ \"\", \"nodecg-bundle\" ], \"nodecg\": { \"compatibleRange\": \"^1.1.1\", \"bundleDependencies\": { \"nodecg-io-core\": \"0.1.0\" } }, \"license\": \"MIT\", \"devDependencies\": { \"@types/node\": \"^13.13.5\", \"nodecg\": \"^1.6.1\", \"typescript\": \"^3.8.3\" }, \"dependencies\": { \"nodecg-io-core\": \"0.1.0\", \"<the package you found in step 1>\": \"<the packages version you wan't to use>\" } } Next you need to put a file called tsconfig.json next to your package.json . The tsconfig.json should look like this: { \"extends\": \"../tsconfig.common.json\" } Now run npm install in the repository root. Create a configuration schema Next create a file called your-service-name-schame.json . This is a json schema file that indicates how the configuration for your service should be structured. If you need help here take a look at this online resource and the schema-files of the other service implementations. Create the service Create a file called index.ts in a folder called extension inside your services directory. You can then paste the following code and fill in your code instead of the comments. // TODO: Rename all occurences of \"YourServiceName\" in PascalCase // TODO: Rename all occurences of \"yourServiceName\" in carmelCase // TODO: Rename all occurences of \"your-service-name\" with only lowercase and hyphens ( - ) import { NodeCG } from \"nodecg/types/server\"; import { ServiceProvider } from \"nodecg-io-core/extension/types\"; import { emptySuccess, success, error, Result } from \"nodecg-io-core/extension/utils/result\"; import { ServiceBundle } from \"nodecg-io-core/extension/serviceBundle\"; // TODO: Replace the \"fake\" service class with that found on npm etc. import { ServiceClass} from \"./\"; interface YourServiceNameServiceConfig { // TODO Fill in the values from your json schema here. The json // schema will load into an instance of this. } export interface YourServiceNameServiceClient { // This interface is exposed to bundles. Make shure it's no longer // possible to access the login credentials from here // TODO: class of the package from step 1 that should be exposed to bundles [needs to be replaced]; getRawClient(): ServiceClass; } module.exports = (nodecg: NodeCG): ServiceProvider<YourServiceNameServiceClient> | undefined => { const yourServiceName = new YourServiceNameService(nodecg, \"your-service-name\", __dirname, \"../your-service-name-schema.json\"); return yourServiceName.register(); }; class YourServiceNameService extends ServiceBundle<YourServiceNameServiceConfig, YourServiceNameServiceClient> { async validateConfig(config: <YourServiceNameServiceConfig): Promise<Result<void>> { // TODO You can validate your config here. If this gets called, the schema is correct. // You should for example check whether oauth keys are valid and servers are online here // If everything is good return 'emptySuccess()' // If an error occurs return 'error(<The error message>)' } async createClient(config: <YourServiceNameServiceConfig): Promise<Result<YourServiceNameServiceClient>> { // TODO Here you should return a <Your service name>ServiceClient that is exposed to bundles. // If everything is good return 'success({ // getRawClient() { // return <The raw client from the package from step 1> // } // })' // If an error occurs return 'error(<The error message>)' } stopClient(client: YourServiceNameServiceClient): void { // Here you shuld make shure you disconnect everything here (if possible). } } Now run npm run build in the repository root, start NodeCG and test your service out. Next steps You could create a sample bundle for your brand-new service. If you don't do so, make sure you add a placeholder file called <the services name>.md in docs/samples in your fork of the documentation. The file should look like this: <!-- Marker for build.py that there's no sample bundle. Remove this if you created one --> ## Using the <the services name> sample bundle No sample bundle for service `<the services name>`. [You can help us and create one!](https://github.com/codeoverflow-org/nodecg-io/blob/master/docs/docs/contribute.md) Do not remove the marker in the first line until the bundle is implemented and don't forget to add this file to mkdocs.yml .","title":"Create a Service"},{"location":"contribute/create_service/#create-a-service-integration","text":"This guide helps you to create a service integration such as twitch-chat or discord","title":"Create a service integration"},{"location":"contribute/create_service/#find-a-javascript-library","text":"Go to npmjs.com and look whether there's already a package that wraps around the API of your service. If there's no such package you need to create one yourself. This process is not described here.","title":"Find a javascript library"},{"location":"contribute/create_service/#create-a-package","text":"From here you will have to replace: YourServiceName to your service's name in PascalCase . yourServiceName to your service's name in carmelCase . * your-service-name to your service's name with only lowercase and hyphens ( - ) for example: ws-server. Now you need to create a package. You should call it nodecg-io-your-service-name . First create a directory with that name put file called package.json into it. Put the following into it: { \"name\": \"nodecg-io-your-service-name\", \"version\": \"0.1.0\", \"description\": \"<Short description what is possible with your service.>\", \"homepage\": \"\", \"author\": { \"name\": \"<Your name>\", \"url\": \"<Your github profile url>\" }, \"scripts\": { \"build\": \"tsc\", \"watch\": \"tsc -w\" }, \"keywords\": [ \"\", \"nodecg-bundle\" ], \"nodecg\": { \"compatibleRange\": \"^1.1.1\", \"bundleDependencies\": { \"nodecg-io-core\": \"0.1.0\" } }, \"license\": \"MIT\", \"devDependencies\": { \"@types/node\": \"^13.13.5\", \"nodecg\": \"^1.6.1\", \"typescript\": \"^3.8.3\" }, \"dependencies\": { \"nodecg-io-core\": \"0.1.0\", \"<the package you found in step 1>\": \"<the packages version you wan't to use>\" } } Next you need to put a file called tsconfig.json next to your package.json . The tsconfig.json should look like this: { \"extends\": \"../tsconfig.common.json\" } Now run npm install in the repository root.","title":"Create a package"},{"location":"contribute/create_service/#create-a-configuration-schema","text":"Next create a file called your-service-name-schame.json . This is a json schema file that indicates how the configuration for your service should be structured. If you need help here take a look at this online resource and the schema-files of the other service implementations.","title":"Create a configuration schema"},{"location":"contribute/create_service/#create-the-service","text":"Create a file called index.ts in a folder called extension inside your services directory. You can then paste the following code and fill in your code instead of the comments. // TODO: Rename all occurences of \"YourServiceName\" in PascalCase // TODO: Rename all occurences of \"yourServiceName\" in carmelCase // TODO: Rename all occurences of \"your-service-name\" with only lowercase and hyphens ( - ) import { NodeCG } from \"nodecg/types/server\"; import { ServiceProvider } from \"nodecg-io-core/extension/types\"; import { emptySuccess, success, error, Result } from \"nodecg-io-core/extension/utils/result\"; import { ServiceBundle } from \"nodecg-io-core/extension/serviceBundle\"; // TODO: Replace the \"fake\" service class with that found on npm etc. import { ServiceClass} from \"./\"; interface YourServiceNameServiceConfig { // TODO Fill in the values from your json schema here. The json // schema will load into an instance of this. } export interface YourServiceNameServiceClient { // This interface is exposed to bundles. Make shure it's no longer // possible to access the login credentials from here // TODO: class of the package from step 1 that should be exposed to bundles [needs to be replaced]; getRawClient(): ServiceClass; } module.exports = (nodecg: NodeCG): ServiceProvider<YourServiceNameServiceClient> | undefined => { const yourServiceName = new YourServiceNameService(nodecg, \"your-service-name\", __dirname, \"../your-service-name-schema.json\"); return yourServiceName.register(); }; class YourServiceNameService extends ServiceBundle<YourServiceNameServiceConfig, YourServiceNameServiceClient> { async validateConfig(config: <YourServiceNameServiceConfig): Promise<Result<void>> { // TODO You can validate your config here. If this gets called, the schema is correct. // You should for example check whether oauth keys are valid and servers are online here // If everything is good return 'emptySuccess()' // If an error occurs return 'error(<The error message>)' } async createClient(config: <YourServiceNameServiceConfig): Promise<Result<YourServiceNameServiceClient>> { // TODO Here you should return a <Your service name>ServiceClient that is exposed to bundles. // If everything is good return 'success({ // getRawClient() { // return <The raw client from the package from step 1> // } // })' // If an error occurs return 'error(<The error message>)' } stopClient(client: YourServiceNameServiceClient): void { // Here you shuld make shure you disconnect everything here (if possible). } } Now run npm run build in the repository root, start NodeCG and test your service out.","title":"Create the service"},{"location":"contribute/create_service/#next-steps","text":"You could create a sample bundle for your brand-new service. If you don't do so, make sure you add a placeholder file called <the services name>.md in docs/samples in your fork of the documentation. The file should look like this: <!-- Marker for build.py that there's no sample bundle. Remove this if you created one --> ## Using the <the services name> sample bundle No sample bundle for service `<the services name>`. [You can help us and create one!](https://github.com/codeoverflow-org/nodecg-io/blob/master/docs/docs/contribute.md) Do not remove the marker in the first line until the bundle is implemented and don't forget to add this file to mkdocs.yml .","title":"Next steps"},{"location":"contribute/sample_documentation/","text":"Add your sample to the docs To document a sample bundle take a look at the name of the service the sample bundle is for. If it's for example nodecg-io-example the documentation must go int docs/samples/example.md in the docs repository. There you should include a step-by-step manual how to configure the service and get the bundle running. Don't forget to add the newly created MarkDown file to mkdocs.yml . When you create your documentation pull request, please include the id of your PR in the main repository in the description so the documentation is not merged before the actual code. You should make this very detailed so everyone gets it to work because a super-good implementation is worth nothing if there's nobody who can use it. Take a look at the twitch sample bundle .","title":"Document a sample"},{"location":"contribute/sample_documentation/#add-your-sample-to-the-docs","text":"To document a sample bundle take a look at the name of the service the sample bundle is for. If it's for example nodecg-io-example the documentation must go int docs/samples/example.md in the docs repository. There you should include a step-by-step manual how to configure the service and get the bundle running. Don't forget to add the newly created MarkDown file to mkdocs.yml . When you create your documentation pull request, please include the id of your PR in the main repository in the description so the documentation is not merged before the actual code. You should make this very detailed so everyone gets it to work because a super-good implementation is worth nothing if there's nobody who can use it. Take a look at the twitch sample bundle .","title":"Add your sample to the docs"},{"location":"samples/ahk/","text":"Using the AHK sample bundle No sample bundle for service ahk . You can help us and create one!","title":"Ahk"},{"location":"samples/ahk/#using-the-ahk-sample-bundle","text":"No sample bundle for service ahk . You can help us and create one!","title":"Using the AHK sample bundle"},{"location":"samples/discord/","text":"Using the Discord sample bundle The Discord-guild-chat example bundle in samples/discord-guild-chat demonstrates the ability ping back messages witch start with !ping . Here is a guide to how to get it working. Prerequisites Working NodeCG & nodecg-oi installation a Discord Bot token Note: If you don't have such a token yet you can follow this guide. Configure the Discord sample bundle Start nodecg with nodecg-io installed. The Discord-guild-chat bundle is currently part of it so it should also be loaded. Go to the nodecg-io tab in the nodecg dashboard. Login using your password. If this is your first run, then enter the password with which you want to encrypt your configurations and credentials. Create a new discord service instance using the left upper menu. Enter your bot token. The created instance should be automatically selected, if not select it in the upper left menu. Enter your Bot token in monaco (the texteditor on the right) in this format: json { \"botToken\": \"your-token-goes-here\" } After entering it, click save. Note: If you don't see monaco on the right, try reloading the page. Set the created discord service instance to the service dependency of the Discord-guild-chat bundle. Select the Discord-guild-chat bundle and the Discord service in the left bottom menu and then select the service instance that should be used by the Discord-guild-chat bundle (in this case the name of the previously created discord instance). Check the nodecg logs You should see an error or a Login message.","title":"Discord"},{"location":"samples/discord/#using-the-discord-sample-bundle","text":"The Discord-guild-chat example bundle in samples/discord-guild-chat demonstrates the ability ping back messages witch start with !ping . Here is a guide to how to get it working.","title":"Using the Discord sample bundle"},{"location":"samples/discord/#prerequisites","text":"Working NodeCG & nodecg-oi installation a Discord Bot token Note: If you don't have such a token yet you can follow this guide.","title":"Prerequisites"},{"location":"samples/discord/#configure-the-discord-sample-bundle","text":"Start nodecg with nodecg-io installed. The Discord-guild-chat bundle is currently part of it so it should also be loaded. Go to the nodecg-io tab in the nodecg dashboard. Login using your password. If this is your first run, then enter the password with which you want to encrypt your configurations and credentials. Create a new discord service instance using the left upper menu. Enter your bot token. The created instance should be automatically selected, if not select it in the upper left menu. Enter your Bot token in monaco (the texteditor on the right) in this format: json { \"botToken\": \"your-token-goes-here\" } After entering it, click save. Note: If you don't see monaco on the right, try reloading the page. Set the created discord service instance to the service dependency of the Discord-guild-chat bundle. Select the Discord-guild-chat bundle and the Discord service in the left bottom menu and then select the service instance that should be used by the Discord-guild-chat bundle (in this case the name of the previously created discord instance). Check the nodecg logs You should see an error or a Login message.","title":"Configure the Discord sample bundle"},{"location":"samples/intellij/","text":"Using the IntelliJ sample bundle The IntelliJ example bundle in samples/intellij Shows how to connect to a JetBrains IDE and print all installed plugins. Here is a guide to how to get it working: clone this Git Repository Make sure you've Java 11 or newer installed. Run gradlew build (on windows) or ./gradlew build (on linux) inside the cloned repository. Inside your JetBrains IDE go to Settings and then Plugins . Click on the little gear in the top right corner. Then click Install from file . Navigate to path to your cloned repository/build/libs and select the jar file there. Restart the IDE Start nodecg with nodecg-io installed. The bundle is currently part of it so it should also be loaded. Go to the nodecg-io tab in the nodecg dashboard. Login using your password. If this is your first run, then enter the password with which you want to encrypt your configurations and credentials. Create a new intellij service instance using the left upper menu. Enter the following { \"address\": \"127.0.0.1:19524\" } This tells nodecg-io to look for your IDE's HTTP server on your computer at port 19524 . If you want it to run on another port please follow the guidelines here Set the created intellij service instance to the service dependency of the sample-intellij bundle. Select the sample-intellij bundle and the intellij service in the left bottom menu and then select the service instance that should be used by the sample-intellij bundle (in this case the name of the previously created intellij instance). Check the nodecg logs You should see an error or a list of all plugins installed at your IDE including the preinstalled ones by JetBrains.","title":"IntelliJ"},{"location":"samples/intellij/#using-the-intellij-sample-bundle","text":"The IntelliJ example bundle in samples/intellij Shows how to connect to a JetBrains IDE and print all installed plugins. Here is a guide to how to get it working: clone this Git Repository Make sure you've Java 11 or newer installed. Run gradlew build (on windows) or ./gradlew build (on linux) inside the cloned repository. Inside your JetBrains IDE go to Settings and then Plugins . Click on the little gear in the top right corner. Then click Install from file . Navigate to path to your cloned repository/build/libs and select the jar file there. Restart the IDE Start nodecg with nodecg-io installed. The bundle is currently part of it so it should also be loaded. Go to the nodecg-io tab in the nodecg dashboard. Login using your password. If this is your first run, then enter the password with which you want to encrypt your configurations and credentials. Create a new intellij service instance using the left upper menu. Enter the following { \"address\": \"127.0.0.1:19524\" } This tells nodecg-io to look for your IDE's HTTP server on your computer at port 19524 . If you want it to run on another port please follow the guidelines here Set the created intellij service instance to the service dependency of the sample-intellij bundle. Select the sample-intellij bundle and the intellij service in the left bottom menu and then select the service instance that should be used by the sample-intellij bundle (in this case the name of the previously created intellij instance). Check the nodecg logs You should see an error or a list of all plugins installed at your IDE including the preinstalled ones by JetBrains.","title":"Using the IntelliJ sample bundle"},{"location":"samples/rcon/","text":"Using the Rcon sample bundle No sample bundle for service rcon . You can help us and create one!","title":"Rcon"},{"location":"samples/rcon/#using-the-rcon-sample-bundle","text":"No sample bundle for service rcon . You can help us and create one!","title":"Using the Rcon sample bundle"},{"location":"samples/streamdeck/","text":"Using the Streamdeck rainbow sample bundle The streamdeck-rainbow bundle paints your streamdeck with different colors. Sadly you can't access the streamdeck while another application accesses it. So you need to stop your Streamdeck Software before. Configure the Streamdeck Rainbow bundle If you're on linux follow the instructions listed under Manual Installation here . Everything after the sudo udevadm command can be omitted. Start nodecg with nodecg-io installed. The streamdeck-rainbow bundle is currently part of it so it should also be loaded. Go to the nodecg-io tab in the nodecg dashboard. Login using your password. If this is your first run, then enter the password with which you want to encrypt your configurations and credentials. Create a new streamdeck service instance using the left upper menu. Enter the configuration json { \"device\": \"default\" } default tells the bundle to automatically find a streamdeck. If you've multiple streamdecks you need to put in an id here. Set the created streamdeck service instance to the service dependency of the streamdeck-rainbow bundle. Watch your streamdeck. Due to issue #21 you might need to replug your streamdeck when you restart nodecg as the connection is not closed when the program exits.","title":"Streamdeck"},{"location":"samples/streamdeck/#using-the-streamdeck-rainbow-sample-bundle","text":"The streamdeck-rainbow bundle paints your streamdeck with different colors. Sadly you can't access the streamdeck while another application accesses it. So you need to stop your Streamdeck Software before.","title":"Using the Streamdeck rainbow sample bundle"},{"location":"samples/streamdeck/#configure-the-streamdeck-rainbow-bundle","text":"If you're on linux follow the instructions listed under Manual Installation here . Everything after the sudo udevadm command can be omitted. Start nodecg with nodecg-io installed. The streamdeck-rainbow bundle is currently part of it so it should also be loaded. Go to the nodecg-io tab in the nodecg dashboard. Login using your password. If this is your first run, then enter the password with which you want to encrypt your configurations and credentials. Create a new streamdeck service instance using the left upper menu. Enter the configuration json { \"device\": \"default\" } default tells the bundle to automatically find a streamdeck. If you've multiple streamdecks you need to put in an id here. Set the created streamdeck service instance to the service dependency of the streamdeck-rainbow bundle. Watch your streamdeck. Due to issue #21 you might need to replug your streamdeck when you restart nodecg as the connection is not closed when the program exits.","title":"Configure the Streamdeck Rainbow bundle"},{"location":"samples/twitch/","text":"Using the Twitch sample bundle The Twitch-chat example bundle in samples/twitch-chat demonstrates the ability to get access to a twitch chat and printing all messages of it. Here is a guide to how to get it working. Prerequisites Working NodeCG & nodcg-io installation a Twitch oAuth-Key Note: If you don't have such a key yet you can generate it on https://twitchapps.com/tmi/. Just log into your Twitch account and copy the token. Configure the Twitch sample bundle Start nodecg with nodecg-io installed. The Twitch-chat bundle is currently part of it so it should also be loaded. Go to the nodecg-io tab in the nodecg dashboard. Login using your password. If this is your first run, then enter the password with which you want to encrypt your configurations and credentials. Create a new twitch service instance using the left upper menu. Enter credentials for twitch. The created instance should be automatically selected, if not select it in the upper left menu. Enter your Twitch oauth Key in monaco (the texteditor on the right) in this format: json { \"oauthKey\": \"oauth:abcdef....\" } After entering it, click save. Note: If you don't see monaco on the right, try reloading the page. Set the created twitch service instance to the service dependency of the Twitch-chat bundle. Select the Twitch-chat bundle and the twitch service in the left bottom menu and then select the service instance that should be used by the Twitch-chat bundle (in this case the name of the previously created twitch instance). Check the nodecg logs You should see an error or a success message and all twitch messages that are written in the twitch channel that is hardcoded in samples/twitch-chat/extension/index.ts .","title":"Twitch"},{"location":"samples/twitch/#using-the-twitch-sample-bundle","text":"The Twitch-chat example bundle in samples/twitch-chat demonstrates the ability to get access to a twitch chat and printing all messages of it. Here is a guide to how to get it working.","title":"Using the Twitch sample bundle"},{"location":"samples/twitch/#prerequisites","text":"Working NodeCG & nodcg-io installation a Twitch oAuth-Key Note: If you don't have such a key yet you can generate it on https://twitchapps.com/tmi/. Just log into your Twitch account and copy the token.","title":"Prerequisites"},{"location":"samples/twitch/#configure-the-twitch-sample-bundle","text":"Start nodecg with nodecg-io installed. The Twitch-chat bundle is currently part of it so it should also be loaded. Go to the nodecg-io tab in the nodecg dashboard. Login using your password. If this is your first run, then enter the password with which you want to encrypt your configurations and credentials. Create a new twitch service instance using the left upper menu. Enter credentials for twitch. The created instance should be automatically selected, if not select it in the upper left menu. Enter your Twitch oauth Key in monaco (the texteditor on the right) in this format: json { \"oauthKey\": \"oauth:abcdef....\" } After entering it, click save. Note: If you don't see monaco on the right, try reloading the page. Set the created twitch service instance to the service dependency of the Twitch-chat bundle. Select the Twitch-chat bundle and the twitch service in the left bottom menu and then select the service instance that should be used by the Twitch-chat bundle (in this case the name of the previously created twitch instance). Check the nodecg logs You should see an error or a success message and all twitch messages that are written in the twitch channel that is hardcoded in samples/twitch-chat/extension/index.ts .","title":"Configure the Twitch sample bundle"},{"location":"samples/twitter/","text":"Using the twitter sample bundle The Twitter timeline bundle retrieves some of the latest tweets from skate702 and printing them to your console. Prerequisites Working NodeCG & nodcg-io installation An app and their following keys and tokens The API key here oauthConsumerKey The API secret key here oauthConsumerSecret The Access token here oauthToken The Access token secret here oauthTokenSecret Note: You will need a twitter developer account (https://developer.twitter.com/en/apply-for-access) to get the necessary keys and tokens. Configure the sample bundle Start nodecg with nodecg-io installed. The twitter-timeline bundle is currently part of it so it should also be loaded. Go to the nodecg-io tab in the nodecg dashboard. Login using your password. If this is your first run, then enter the password with which you want to encrypt your configurations and credentials. Create a new twitter service instance using the left upper menu. Enter credentials for twitter. The created instance should be automatically selected, if not select it in the upper left menu. Enter your Twitter keys and tokens in monaco (the texteditor on the right) in this format: json { \"oauthConsumerKey\": \"<API key>\", \"oauthConsumerSecret\": \"<API secret key>\", \"oauthToken\": \"<Access token>\", \"oauthTokenSecret\": \"<Access token secret>\", } After entering it, click save. Note: If you don't see monaco on the right, try reloading the page. Set the created twitter service instance to the service dependency of the twitter-timeline bundle. Select the twitter-timeline bundle and the twitter service in the left bottom menu and then select the service instance that should be used by the twitter-timeline bundle (in this case the name of the previously created twitter instance). Check the nodecg logs You should see an error or a success message and up to 50 twitter messages tweeted by the user that is hardcoded in samples/twitter-timeline/extension/index.ts as screen_name . Need to know for creating your own twitter bundle A little description of the twitter client and it's usage The client implements the different API endpoints with two functions ```typescript client.get(\" \", params, callback) client.post(\" \", params, callback) // Instead of callbacks it can be used with promises client .get(\"statuses/user_timeline\", {screen_name: \"skate702\"}) .then((tweets) => / Do something with the tweets /) .catch((error) => / Handle error /); // Or async and await as well try { const tweets = await client.get(\"statuses/user_timeline\", {screen_name: \"skate702\"}); // Do something with the tweets } catch (error) { // Handle error } ``` A more precise description of what can be done with this twitter client can be found here","title":"Twitter"},{"location":"samples/twitter/#using-the-twitter-sample-bundle","text":"The Twitter timeline bundle retrieves some of the latest tweets from skate702 and printing them to your console.","title":"Using the twitter sample bundle"},{"location":"samples/twitter/#prerequisites","text":"Working NodeCG & nodcg-io installation An app and their following keys and tokens The API key here oauthConsumerKey The API secret key here oauthConsumerSecret The Access token here oauthToken The Access token secret here oauthTokenSecret Note: You will need a twitter developer account (https://developer.twitter.com/en/apply-for-access) to get the necessary keys and tokens.","title":"Prerequisites"},{"location":"samples/twitter/#configure-the-sample-bundle","text":"Start nodecg with nodecg-io installed. The twitter-timeline bundle is currently part of it so it should also be loaded. Go to the nodecg-io tab in the nodecg dashboard. Login using your password. If this is your first run, then enter the password with which you want to encrypt your configurations and credentials. Create a new twitter service instance using the left upper menu. Enter credentials for twitter. The created instance should be automatically selected, if not select it in the upper left menu. Enter your Twitter keys and tokens in monaco (the texteditor on the right) in this format: json { \"oauthConsumerKey\": \"<API key>\", \"oauthConsumerSecret\": \"<API secret key>\", \"oauthToken\": \"<Access token>\", \"oauthTokenSecret\": \"<Access token secret>\", } After entering it, click save. Note: If you don't see monaco on the right, try reloading the page. Set the created twitter service instance to the service dependency of the twitter-timeline bundle. Select the twitter-timeline bundle and the twitter service in the left bottom menu and then select the service instance that should be used by the twitter-timeline bundle (in this case the name of the previously created twitter instance). Check the nodecg logs You should see an error or a success message and up to 50 twitter messages tweeted by the user that is hardcoded in samples/twitter-timeline/extension/index.ts as screen_name .","title":"Configure the sample bundle"},{"location":"samples/twitter/#need-to-know-for-creating-your-own-twitter-bundle","text":"","title":"Need to know for creating your own twitter bundle"},{"location":"samples/twitter/#a-little-description-of-the-twitter-client-and-its-usage","text":"The client implements the different API endpoints with two functions ```typescript client.get(\" \", params, callback) client.post(\" \", params, callback) // Instead of callbacks it can be used with promises client .get(\"statuses/user_timeline\", {screen_name: \"skate702\"}) .then((tweets) => / Do something with the tweets /) .catch((error) => / Handle error /); // Or async and await as well try { const tweets = await client.get(\"statuses/user_timeline\", {screen_name: \"skate702\"}); // Do something with the tweets } catch (error) { // Handle error } ```","title":"A little description of the twitter client and it's usage"},{"location":"samples/twitter/#a-more-precise-description-of-what-can-be-done-with-this-twitter-client-can-be-found-here","text":"","title":"A more precise description of what can be done with this twitter client can be found here"},{"location":"samples/ws-client/","text":"Using the WebSocket-client sample bundle No sample bundle for service ws-client . You can help us and create one!","title":"Client"},{"location":"samples/ws-client/#using-the-websocket-client-sample-bundle","text":"No sample bundle for service ws-client . You can help us and create one!","title":"Using the WebSocket-client sample bundle"},{"location":"samples/ws-server/","text":"Using the WebSocket-server sample bundle No sample bundle for service ws-client . You can help us and create one!","title":"Server"},{"location":"samples/ws-server/#using-the-websocket-server-sample-bundle","text":"No sample bundle for service ws-client . You can help us and create one!","title":"Using the WebSocket-server sample bundle"}]}